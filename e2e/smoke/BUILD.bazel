load("@aspect_bazel_lib//lib:bats.bzl", "bats_test")
load("@aspect_bazel_lib//lib:copy_directory.bzl", "copy_directory")
load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_bazel_lib//lib:diff_test.bzl", "diff_test")
load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@aspect_bazel_lib//lib:tar.bzl", "mtree_spec", "tar")
load("@aspect_bazel_lib//lib:yq.bzl", "yq")

# Validate that JQ works and resolves its toolchain
jq(
    name = "jq_case_no_sources",
    srcs = [],
    filter = ".",
)

diff_test(
    name = "jq_test",
    file1 = "jq_case_no_sources",
    file2 = "expected_jq",
)

# Validate that YQ works and resolves its toolchain
yq(
    name = "yq_case_no_sources",
    srcs = [],
    expression = ".",
)

diff_test(
    name = "yq_test",
    file1 = "yq_case_no_sources",
    file2 = "expected_yq",
)

# Validate that copy_directory works and resolves its toolchain
copy_directory(
    name = "copy_directory_case",
    src = "d",
    out = "d_out",
    verbose = True,
)

diff_test(
    name = "copy_directory_test",
    file1 = "d",
    file2 = "copy_directory_case",
)

# Validate that copy_to_directory works and resolves its toolchain
copy_to_directory(
    name = "copy_to_directory_case",
    srcs = ["d"],
    out = "d2_out",
    replace_prefixes = {"d/": ""},
)

diff_test(
    name = "copy_to_directory_test",
    file1 = "d",
    file2 = "copy_to_directory_case",
)

# Validate that expand_template works and resolves its toolchain
expand_template(
    name = "a_tmpl_stamp",
    out = "a_stamp",
    data = ["a.tmpl"],
    stamp = 1,
    stamp_substitutions = {
        "{{VERSION}}": "v{{BUILD_SCM_VERSION}}",
    },
    substitutions = {
        "{{VERSION}}": "v0.0.0",
        "{{WORKSPACE}}": "$(WORKSPACE)",
    },
    template = "a.tmpl",
)

diff_test(
    name = "a_stamp_test",
    file1 = ":a_stamp",
    file2 = select({
        "@aspect_bazel_lib//lib:bzlmod": "a_stamp_expected_bzlmod",
        "//conditions:default": "a_stamp_expected",
    }),
)

# Validate that tar works and resolves its toolchain
tar(
    name = "tar_empty",
    srcs = [],
    mtree = [],
)

mtree_spec(
    name = "testdata_mtree",
    srcs = [":testdata_files"],
)

genrule(
    name = "testdata_mtree.fixed",
    srcs = [":testdata_mtree"],
    outs = ["testdata_mtree.mtree"],
    cmd = """
while IFS= read -r line; do
    echo "Processing line: $$line"
    output="$$line"
    if [[ $$line = *[![:ascii:]]* ]]; then
        echo "Contains Non-ASCII: $$line"
        filename="$$(sed 's| uid=0.*||' <<< "$$line")"
        body="$$(sed 's|.*\\( uid=0.* content=\\).*|\\1|' <<< "$$line")"
        repl="$$(vis -wo <<< "$$filename")"
        echo "filename: <$$filename> => <$$repl> (body=<$$body>)"
        pattern="$$(echo "$$filename" | sed -e 's/[.^$$[*+?]/\\&/g')"
        newline="$$(sed "s|$$filename|foo|g" <<< "$$line")"
        echo "replaced line: $$newline"
        output="$$repl$$body$$repl"
    fi
    echo "$$output" >>$@
done < $<
    """,
)

tar(
    name = "testdata_tar",
    srcs = [":testdata_files"],
    mtree = [":testdata_mtree"],
)

filegroup(
    name = "testdata_files",
    srcs = glob(["testdata/**/*"]),
)

diff_test(
    name = "mtree_golden_test",
    file1 = ":testdata_mtree",
    file2 = "testdata_mtree.spec.golden",
)

bats_test(
    name = "bats",
    srcs = [
        "basic.bats",
    ],
)
