"Provide access to a BSD tar"

load(":repo_utils.bzl", "repo_utils")

BSDTAR_PLATFORMS = {
    "host": struct(
        # loaded by the macro
        compatible_with = "HOST_CONSTRAINTS"
    ),
    "linux_amd64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    # TODO(alexeagle): download from libarchive github releases.
    "windows_amd64": struct(
        release_platform = "win64",
        compatible_with = [
            "@platforms//os:windows",
            "@platforms//cpu:x86_64",
        ],
    ),
}

LIBARCHIVE_TOOLS_URLS = {
    "linux_amd64": struct(
        url = "https://launchpadlibrarian.net/595393330/libarchive-tools_3.6.0-1ubuntu1_amd64.deb",
        integrity = "939d1a0e676d8abb9bf6696eb731e2cb1f851d7d101b294c2b613ab8d4e739bb",
        type = "deb"
    ),
    "linux_arm64": struct(
        url = "https://launchpadlibrarian.net/595395427/libarchive-tools_3.6.0-1ubuntu1_arm64.deb",
        integrity = "73c04624e680f23c90bc5067ef8b454ca02e0c3b6b3fecc1cc78a7750bacc11b",
        type = "deb"
    )
}
    

def _find_usable_system_tar(rctx, tar_name):
    tar = rctx.which(tar_name)
    if not tar:
        fail("tar not found on PATH, and we don't handle this case yet")

    # Run tar --version and see if we are satisfied to use it
    tar_version = rctx.execute([tar, "--version"]).stdout.strip()

    # TODO: also check if it's really ancient or compiled without gzip support or something?
    # TODO: document how users could fetch the source and compile it themselves
    if tar_version.find("bsdtar") >= 0:
        return tar

    fail("tar isn't a BSD tar. TODO: fetch one for windows/linux")


def _bsdtar_binary_repo(rctx):
    tar_name = "tar.exe" if repo_utils.is_windows(rctx) else "tar"
    
    if rctx.attr.platform == "host":
        tar = _find_usable_system_tar(rctx, tar_name)
        output = rctx.path(tar_name)
        # TODO: find a way to make it RBE friendly.
        r = rctx.symlink(tar, output)
        # if r.return_code != 0:
        #     fail("failed to copy tar executable.\nstderr: \n{}\nstdout: {}".format(r.stderr, r.stdout))
        
    else:
        metadata = LIBARCHIVE_TOOLS_URLS[rctx.attr.platform]
        # TODO: windows.
        rctx.download_and_extract(
            url =  metadata.url,
            output = "deb",
            type = metadata.type,
            sha256 = metadata.integrity
        )
        rctx.extract(
            "deb/data.tar.zst",
            stripPrefix = "usr/bin/",
        )
        tar_name = "bsdtar"

    rctx.file("BUILD.bazel", """\
# @generated by @aspect_bazel_lib//lib/private:tar_toolchain.bzl

load("@aspect_bazel_lib//lib/private:tar_toolchain.bzl", "tar_toolchain")

tar_toolchain(
    name = "bsdtar_toolchain", 
    binary = "{bin}", 
    visibility = ["//visibility:public"]
)
""".format(bin = tar_name))

bsdtar_binary_repo = repository_rule(
    implementation = _bsdtar_binary_repo,
    attrs = {
        "platform": attr.string(mandatory = True, values = BSDTAR_PLATFORMS.keys()),
    },
)


TarInfo = provider(
    doc = "Provide info for executing BSD tar",
    fields = {
        "binary": "bsdtar executable",
    },
)


def _tar_toolchain_impl(ctx):
    binary = ctx.executable.binary

    # Make the $(BSDTAR_BIN) variable available in places like genrules.
    # See https://docs.bazel.build/versions/main/be/make-variables.html#custom_variables
    template_variables = platform_common.TemplateVariableInfo({
        "BSDTAR_BIN": binary.path,
    })

    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    tarinfo = TarInfo(
        binary = binary,
    )

    # Export all the providers inside our ToolchainInfo
    # so the resolved_toolchain rule can grab and re-export them.
    toolchain_info = platform_common.ToolchainInfo(
        tarinfo = tarinfo,
        template_variables = template_variables,
        default = default_info,
    )

    return [toolchain_info, template_variables, default_info]

tar_toolchain = rule(
    implementation = _tar_toolchain_impl,
    attrs = {
        "binary": attr.label(
            doc = "a command to find on the system path",
            allow_single_file = True,
            executable = True,
            cfg = "exec"
        ),
    },
)

def _tar_toolchains_repo_impl(rctx):
    # Expose a concrete toolchain which is the result of Bazel resolving the toolchain
    # for the execution or target platform.
    # Workaround for https://github.com/bazelbuild/bazel/issues/14009
    starlark_content = """\
# @generated by @aspect_bazel_lib//lib/private:tar_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@aspect_bazel_lib//lib:tar_toolchain_type"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.tarinfo,
        toolchain_info.template_variables,
    ]

# Copied from java_toolchain_alias
# https://cs.opensource.google/bazel/bazel/+/master:tools/jdk/java_toolchain_alias.bzl
resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@aspect_bazel_lib//lib:tar_toolchain_type"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", starlark_content)

    build_content = """# @generated by @aspect_bazel_lib//lib/private:tar_toolchain.bzl
load(":defs.bzl", "resolved_toolchain")
load("@local_config_platform//:constraints.bzl", "HOST_CONSTRAINTS")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])"""

    for [platform, meta] in BSDTAR_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:bsdtar_toolchain",
    toolchain_type = "@aspect_bazel_lib//lib:tar_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )


    rctx.file("BUILD.bazel", build_content)

tar_toolchains_repo = repository_rule(
    _tar_toolchains_repo_impl,
    doc = """Creates a repository that exposes a tar_toolchain_type target.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)
