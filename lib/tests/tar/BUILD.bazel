load("@aspect_bazel_lib//lib:tar.bzl", "tar")
load("@aspect_bazel_lib//lib:testing.bzl", "assert_archive_contains")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load(":asserts.bzl", "assert_tar_listing")

write_file(
    name = "fixture1",
    out = "a",
    content = ["hello a"],
)

# Case 1: Show that you can run any `tar` command you like, using a genrule.
genrule(
    name = "tar1",
    srcs = [
        ":fixture1",
        "src_file",
    ],
    outs = ["1.tar"],
    cmd = "$(BSDTAR_BIN) --create --dereference --file $@ -s '#$(BINDIR)##' $(execpath :fixture1) $(execpath src_file)",
    toolchains = ["@bsd_tar_toolchains//:resolved_toolchain"],
)

assert_archive_contains(
    name = "test1",
    archive = "1.tar",
    expected = [
        "lib/tests/tar/a",
        "lib/tests/tar/src_file",
    ],
)

# Case 2: demonstrate using a custom mtree formatted specification.
# Copied from the output of `man tar`:
#    An input file in	mtree(5) format	 can  be  used	to  create  an	output
#    archive with  arbitrary ownership, permissions, or names that	differ
#    from existing data on disk:
#      $ cat input.mtree
#      #mtree
#      usr/bin uid=0 gid=0 mode=0755 type=dir
#      usr/bin/ls	uid=0 gid=0 mode=0755 type=file	content=myls
#      $ tar -cvf	output.tar @input.mtree
tar(
    name = "tar2",
    srcs = ["src_file"],
    mtree = [
        "usr/bin uid=0 gid=0 mode=0755 type=dir",
        "usr/bin/ls uid=0 gid=0 mode=0755 time=0 type=file content={}/src_file".format(package_name()),
    ],
)

assert_tar_listing(
    name = "test2",
    actual = "tar2",
    expected = [
        "drwxr-xr-x  0 0      0           0 Dec 31  1969 usr/bin/",
        "-rwxr-xr-x  0 0      0          21 Dec 31  1969 usr/bin/ls",
    ],
)

# Case 3: compression
tar(
    name = "tar3",
    srcs = ["a"],
    out = "3.tgz",
    compress = "gzip",
)

assert_archive_contains(
    name = "test3",
    archive = "3.tgz",
    expected = ["lib/tests/tar/a"],
    type = "tar",
)

# Case 4: permit arbitrary flags
write_file(
    name = "fixture2",
    out = ".git",
    content = ["it's a folder"],
)

tar(
    name = "tar4",
    srcs = [
        ".git",
        "a",
        "src_file",
    ],
    out = "4.tar",
    # Due to this argument, .git should not appear in the resulting tar
    args = ["--exclude-vcs"],
)

assert_tar_listing(
    name = "test4",
    actual = "tar4",
    expected = [
        "-rwxr-xr-x  0 0      0           7 Jan  1  2023 lib/tests/tar/a",
        "-rwxr-xr-x  0 0      0          21 Jan  1  2023 lib/tests/tar/src_file",
    ],
)
