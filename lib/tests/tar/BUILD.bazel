load("@aspect_bazel_lib//lib:tar.bzl", "tar")
load("@aspect_bazel_lib//lib:testing.bzl", "assert_archive_contains")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load(":asserts.bzl", "assert_tar_listing")

write_file(
    name = "gen_a",
    out = "a",
    content = ["hello a"],
)

# Case 1: Show that you can run any `tar` command you like, using a genrule.
genrule(
    name = "tar_a",
    srcs = ["a"],
    outs = ["a.tar"],
    cmd = "$(BSDTAR_BIN) -C $(BINDIR) --create --dereference --file $@ $(rootpath a)",
    toolchains = ["@bsd_tar_toolchains//:resolved_toolchain"],
)

assert_archive_contains(
    name = "check_a",
    archive = "a.tar",
    expected = ["lib/tests/tar/a"],
)

# Case 2: demonstrate using an mtree formatted specification file.
# Copied from the output of `man tar`:
#    An input file in	mtree(5) format	 can  be  used	to  create  an	output
#    archive with  arbitrary ownership, permissions, or names that	differ
#    from existing data on disk:
#      $ cat input.mtree
#      #mtree
#      usr/bin uid=0 gid=0 mode=0755 type=dir
#      usr/bin/ls	uid=0 gid=0 mode=0755 type=file	content=myls
#      $ tar -cvf	output.tar @input.mtree
tar(
    name = "b",
    srcs = ["a"],
    mtree = [
        "usr/bin uid=0 gid=0 mode=0755 type=dir",
        "usr/bin/ls uid=0 gid=0 mode=0755 time=0 type=file content={}/a".format(package_name()),
    ],
)

assert_tar_listing(
    name = "test_b",
    actual = "b",
    expected = [
        "drwxr-xr-x  0 0      0           0 Dec 31  1969 usr/bin/",
        "-rwxr-xr-x  0 0      0           7 Dec 31  1969 usr/bin/ls",
    ],
)

# Case 3: compression
tar(
    name = "c",
    srcs = ["a"],
    out = "c.tgz",
    compress = "gzip",
)

assert_archive_contains(
    name = "check_c",
    archive = "c.tgz",
    expected = ["lib/tests/tar/a"],
    type = "tar",
)
